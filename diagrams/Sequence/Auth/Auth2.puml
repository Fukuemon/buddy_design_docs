@startuml Auth
Actor ユーザー
Participant Frontend as Front
Participant APIGateway as Gateway
Participant Lambda
Participant Cognito
Database Redis
Participant Backend as Back
Participant DB

ユーザー -> Front: Action
activate Front
Front -> Gateway: Get: /schedules -header: {sessionId: SessionID}
note left
sessionIDを元に、
認証状態の確認を行う
end note

activate Gateway
Gateway -> Lambda: Lambda Authorizer
note right
Lambda Authorizerで、
トークン検証の処理を呼ぶ
end note

activate Lambda
Lambda -> Redis: getAccessToken(sessionID: sessionID)

activate Redis
Redis --> Lambda: accessToken
note right
セッションIDに紐づくアクセストークンを取得
存在しない場合は、エラーを返す
end note
deactivate Redis

Lambda -> Cognito: GetUser(accessToken: accessToken)
note right
アクセストークンを元に、職員（ユーザー）情報を取得
失敗した場合、エラーを返す
end note
activate Cognito
Cognito --> Lambda: 職員情報返却
deactivate Cognito

Lambda --> Gateway: 認証結果 & 職員IDを返却
deactivate Lambda

Gateway -> Back: （成功時）Get: /schedules -header: {userID: userID}
activate Back
Back -> DB: 職員情報取得
activate DB
DB --> Back: 職員情報返却
deactivate DB
Back --> Back: 職員の権限情報を確認
note right
バックエンドでは、リクエストから権限情報を確認する
成功時、処理を実行し、レスポンスを返す
end note

Back -> DB: 権限内に存在する職員の予定情報を取得
activate DB
DB --> Back: 職員の予定情報を返却
deactivate DB
Back --> Gateway: Response"200":{schedules: schedules}
deactivate Back
Gateway --> Front: Response"200":{schedules: schedules}
deactivate Gateway
Front --> ユーザー: 画面表示
deactivate Front
@enduml